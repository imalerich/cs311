
package cs311.hw7.graphalgorithms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import cs311.hw7.graph.IGraph;
import cs311.hw7.graph.IGraph.Vertex;


public class GraphAlgorithms {

    /* ----------------------------------------------------------------------------
     * Topological Sort(...)
     * ---------------------------------------------------------------------------- */

    public static <V, E> List<Vertex<V>> TopologicalSort(IGraph<V, E> g) {
    	ArrayList<Vertex<V>> l = new ArrayList<Vertex<V>>();
    	
    	// Create the HashMap representing the marks of our vertices.
    	HashMap<String, Boolean> visited = new HashMap<String, Boolean>();
    	for (Vertex<V> v : g.getVertices()) {
    		visited.put(v.getVertexName(), false);
    	}

        return l;
    }
    
    /* ----------------------------------------------------------------------------
     * All Topological Sort(...)
     * ---------------------------------------------------------------------------- */
    
    public static <V, E> List<List<Vertex<V>>> AllTopologicalSort(IGraph<V, E> g) {
        return null;
    }
    
    /* ----------------------------------------------------------------------------
     * Kruscal(...)
     * ---------------------------------------------------------------------------- */
    
    public static <V, E extends IWeight> IGraph<V, E> Kruscal(IGraph<V, E> g) {
        return null;
    }
}
