
package cs311.hw7.graphalgorithms;

import java.util.ArrayList;
import java.util.List;

import cs311.hw7.graph.IGraph;
import cs311.hw7.graph.IGraph.Vertex;


public class GraphAlgorithms {

    public static <V, E> List<Vertex<V>> TopologicalSort(IGraph<V, E> g) {
    	ArrayList<Vertex<V>> l = new ArrayList<Vertex<V>>();
    	ArrayList<Vertex<V>> s = new ArrayList<Vertex<V>>();
    	
    	// First we need to fill up the list 's' with all vertices with no incoming edges.
    	for (Vertex<V> v : g.getVertices()) {
    		//
    	}

        return l;
    }
    
    public static <V, E> List<List<Vertex<V>>> AllTopologicalSort(IGraph<V, E> g) {
        return null;
    }
    
    public static <V, E extends IWeight> IGraph<V, E> Kruscal(IGraph<V, E> g) {
        return null;
    }
    
    private static <V, E> boolean hasIncomingEdges(Vertex<V> v, IGraph<V, E> g) {
    	//
    }
}
