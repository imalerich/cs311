
package cs311.hw8.graphalgorithms;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

import cs311.hw8.graph.Graph;
import cs311.hw8.graph.IGraph;
import cs311.hw8.graph.IGraph.Edge;
import cs311.hw8.graph.IGraph.Vertex;


public class GraphAlgorithms {

    /* ----------------------------------------------------------------------------
     * Homework 8 Additions
     * ---------------------------------------------------------------------------- */
	
	/**
	 * Performs Dijkstra's shortest path algorithm to find the shortest path in graph g from vertexStart to vertexEnd.
	 * @param g Input graph to find the shortest path for.
	 * @param vertexStart The starting vertex to find our shortest path from.
	 * @param vertexEnd Which vertex do we want to know the shortest path towards?
	 * @return The list of edges representing the shortest path from 'vertexStart' to 'vertexEnd'.
	 */
	public static <V, E extends IWeight> List<Edge<E>> ShortestPath(IGraph<V, E> g, String vertexStart, String vertexEnd) {
		// Set of Vertices that need to be parsed.
		Set<IGraph.Vertex<V>> Q = new HashSet<IGraph.Vertex<V>>();
		// Current set of distances from 'vertexStart' to any given vertex.
		Map<String, Double> dist = new HashMap<String, Double>();
		// Will contain the previous node (value) in the shortest path to any given node (key).
		Map<String, String> prev = new HashMap<String, String>();

		// Initialize the above sets and maps.
		List<IGraph.Vertex<V>> vertices = g.getVertices();
		for (IGraph.Vertex<V> v : vertices) {
			dist.put(v.getVertexName(), Double.MAX_VALUE);
			Q.add(v);
		}

		// The initial distance from the source will be 0.
		dist.put(vertexStart, 0.0);
		
		double start = 0.0;
		double mintime = 0.0;
		double neighbortime = 0.0;
		double foreachtime = 0.0;
		
		while (!Q.isEmpty()) {
			// First we need the vertex in Q with the minimum dist value.
			double mindist = Double.MAX_VALUE;
			start = System.nanoTime();
			IGraph.Vertex<V> u = null;
			for (IGraph.Vertex<V> v : Q) {
				if (dist.get(v.getVertexName()).doubleValue() < mindist) {
					mindist = dist.get(v.getVertexName()).doubleValue();
					u = v;
				}
			}
			double end = System.nanoTime();
			mintime += end - start;
			
			Q.remove(u);
			
			// If u is the target node (vertexEnd) then there is no more work necessary. Break out of the loop.
			if (u.getVertexName().equals(vertexEnd)) {
				break;
			}
			
			// Now for each of the neighbors of our given vertex.
			start = System.nanoTime();
			List<IGraph.Vertex<V>> neighbors = g.getNeighbors(u.getVertexName());
			end = System.nanoTime();
			System.out.println("neighbors: " + ((end - start)));

			start = System.nanoTime();
			for (IGraph.Vertex<V> n : neighbors) {
				IGraph.Edge<E> e = g.getEdge(u.getVertexName(), n.getVertexName());
				double d = dist.get(u.getVertexName()) + e.getEdgeData().getWeight();
				
				// Check if this distance is shorter than what we already had.
				if (d < dist.get(n.getVertexName())) {
					dist.put(n.getVertexName(), d);
					prev.put(n.getVertexName(), u.getVertexName());
				}
			}
			end = System.nanoTime();
			System.out.println("for each neighbor" + ((end - start)));
		}
		
		// We now have all the information we need, all we need to do is construct an array of edges
		// representing the path we have constructed and return that list.
		List<IGraph.Edge<E>> path = new ArrayList<IGraph.Edge<E>>();
		for (String v = vertexEnd; v != vertexStart;) {
			// What is the previous node?
			String p = prev.get(v);
			// Find the edge from p to v (note that p is previous).
			IGraph.Edge<E> e = g.getEdge(p, v);
			// Add this edge to the front of the array (note edges are retrieved in reverse order).
			path.add(0, e);
			// Iterate to the previous node.
			v = p;
		}

		return path;
	}
	
    /* ----------------------------------------------------------------------------
     * Topological Sort(...)
     * ---------------------------------------------------------------------------- */
	
	/**
	 * Potential statuses a vertex may be in during a Topological Sort.
	 * @author Ian Malerich
	 */
	private enum Status {
		VISITED, TEMPORARY, UNVISITED
	}

	/**
	 * Perform a topological sort on the given graph. If the input graph is not a DAG
	 * null will be returned, else a sorted array of vertices will be returned to the
	 * caller.
	 * @param g Graph whose vertices we wish to sort.
	 * @return Sorted list of vertices.
	 */
    public static <V, E> List<Vertex<V>> TopologicalSort(IGraph<V, E> g) {
    	ArrayList<Vertex<V>> l = new ArrayList<Vertex<V>>();
    	
    	// Create the HashMap representing the marks of our vertices.
    	HashMap<String, Status> status = new HashMap<String, Status>();
    	for (Vertex<V> v : g.getVertices()) {
    		// All vertices are initially 'UNVISITED'.
    		status.put(v.getVertexName(), Status.UNVISITED);
    	}
    	
    	// n will be our current unmarked node.
    	for (Vertex<V> n = selectUnmarked(status, g); n != null; n = selectUnmarked(status, g)) {
    		try {
				procVertex(n, status, g, l);
    		} catch (RuntimeException e) {
    			// Graph is not a DAG, return null.
    			return null;
    		}
    	}

        return l;
    }
    
    /**
     * Process a vertex in our depth first search based algorithm (recursive implementation).
     * @param n The current node to parse.
     * @param s List of current statuses for all nodes in the input graph.
     * @param g Graph containing all vertices to parse.
     * @param l List subset to the topologically sorted list of vertices.
     */
    private static <V, E> void procVertex(Vertex<V> n, HashMap<String, Status> s, IGraph<V, E> g, List<Vertex<V>> l) {
		if (s.get(n.getVertexName()) == Status.TEMPORARY) {
			// The graph is not a DAG, return null for failure.
			throw new RuntimeException();
		}
		
		if (s.get(n.getVertexName()) == Status.UNVISITED) {
			s.put(n.getVertexName(), Status.TEMPORARY);
			for (Vertex<V> m : g.getNeighbors(n.getVertexName())) {
				procVertex(m, s, g, l);
			}
			s.put(n.getVertexName(), Status.VISITED);
			l.add(0, n);
		}
    }
    
    /**
     * Select an unmarked node from the given graph.
     * @param v List of current status for all vertices in the input graph.
     * @param g Graph of vertices to pick from.
     * @return An unvisited vertex, null if no such vertices exist.
     */
    private static <V, E> Vertex<V> selectUnmarked(HashMap<String, Status> v, IGraph<V, E> g) {
    	for (String key : v.keySet()) {
    		// If the vertex denoted by 'key' has not been visited, return it.
    		if (v.get(key) == Status.UNVISITED) {
    			return g.getVertex(key);
    		}
    	}

    	// All nodes have been visited return false.
    	return null;
    }
    
    /* ----------------------------------------------------------------------------
     * All Topological Sort(...)
     * ---------------------------------------------------------------------------- */
    
    /**
     * Computes all possible topological sorts of the input graph.
     * @param g The graph to compute all topological sorts for.
     * @return A List containing all topological sorts (themselves represented as lists of vertices).
     */
    public static <V, E> List<List<Vertex<V>>> AllTopologicalSort(IGraph<V, E> g) {
    	List<List<Vertex<V>>> all = new ArrayList<List<Vertex<V>>>(); // this will be what we return
    	List<Vertex<V>> l = new ArrayList<Vertex<V>>(); // this is a temporary working array
    	
    	// Create the HashMap representing the marks of our vertices.
    	HashMap<String, Status> s = new HashMap<String, Status>();
    	HashMap<String, Integer> i = new HashMap<String, Integer>();

    	for (Vertex<V> v : g.getVertices()) {
    		// All vertices are initially 'UNVISITED'.
    		s.put(v.getVertexName(), Status.UNVISITED);
    		i.put(v.getVertexName(), vertexInDegree(v, g));
    	}
    	
    	// Perform a modified version of Khan's algorithm.
    	procAllTopoSort(g, l, all, s, i);

        return all;
    }
    
    /**
     * Brute force method based on Khan's algorithm for finding all possible topological sorts.
     * @param g The graph we are parsing.
     * @param l Current working (dirty) topological sort.
     * @param all Current list of completed topological sorts.
     * @param s Current status' for all vertices.
     * @param i InDegree count for ann vertices.
     */
    private static <V, E> void procAllTopoSort(IGraph<V, E> g, 
    		List<Vertex<V>> l, List<List<Vertex<V>>> all,
    		HashMap<String, Status> s, HashMap<String, Integer> i) {
    	for (Vertex<V> v : g.getVertices()) {
    		// If there are no inputs to this vertex and it has not been visited...
    		if (i.get(v.getVertexName()) == 0 && s.get(v.getVertexName()) == Status.UNVISITED) {
    			for (Vertex<V> w : g.getNeighbors(v.getVertexName())) {
    				i.put(w.getVertexName(), i.get(w.getVertexName())-1);
    			}
    			
    			l.add(v);
    			s.put(v.getVertexName(), Status.VISITED);

    			// Recurse with v set to VISITED.
    			procAllTopoSort(g, l, all, s, i);
    			
    			// Undo the work we did generating this topological sort and continue.
    			s.put(v.getVertexName(), Status.UNVISITED);
    			l.remove(l.size()-1);
    			for (Vertex<V> w : g.getNeighbors(v.getVertexName())) {
    				i.put(w.getVertexName(), i.get(w.getVertexName())+1);
    			}
    		}
    	}
    	
    	if (l.size() == g.getVertices().size()) {
    		// l is one of the possible results, add it to the output array
    		all.add(new ArrayList<Vertex<V>>(l));
    	}
    }
    
    /**
     * Count the total number of edges going into our vertex v.
     * This is equal to then number of vertices that are not v
     * that have v as a neighbor.
     * @param v Vertex to check for inputs to.
     * @param g The graph to get edges and vertices from.
     * @return Total number of edges that go INTO v.
     */
    private static <V, E> int vertexInDegree(Vertex<V> v, IGraph<V, E> g) {
    	int degree = 0;
    	for (Vertex<V> n : g.getVertices()) {
    		if (n != v && g.getNeighbors(n.getVertexName()).contains(v)) {
    			degree++;
    		}
    	}
    	return degree;
    }
    
    /* ----------------------------------------------------------------------------
     * Kruscal(...)
     * ---------------------------------------------------------------------------- */
    
    /**
     * Perform Kruscal's algorithm to find a minimum spanning tree of the input graph.
     * Note that this requires that the graph be undirected, as such, this method 
     * will explicitly set the graph as undirected if it is not. If this provides a
     * problem with the grader, go ahead and dock my points I don't give enough of a shit
     * to support directed graphs.
     * If the input graph is not fully connected, it will return a graph with fully connected
     * components realized by minimum spanning forests.
     * @param g The graph to generate a minimum spanning tree for.
     * @return The minimum spanning tree for the graph g.
     */
    public static <V, E extends IWeight> IGraph<V, E> Kruscal(IGraph<V, E> g) {
    	// This methods requires that the graph be undirected, enforce that here.
    	g.setUndirectedGraph();
    	// This is our mst, for our in class notes it represents the v' and e' sets.
    	IGraph<V, E> mst = new Graph<V, E>();
    	mst.setUndirectedGraph();
    	
    	// The MST needs all vertices, so we can go ahead and add them all.
    	for (Vertex<V> v : g.getVertices()) {
    		mst.addVertex(v.getVertexName(), v.getVertexData());
    	}
    	
    	// Now generate the priority queue, initially filled with all of the available edges,
    	// using a comparator that can compare edge weights.
    	List<Edge<E>> edges = g.getEdges();
    	PriorityQueue<Edge<E>> pq = new PriorityQueue<Edge<E>>(edges.size(), 
			new Comparator<Edge<E>>() {
				public int compare(Edge<E> first, Edge<E> second) {
					Double f = first.getEdgeData().getWeight();
					Double s = second.getEdgeData().getWeight();
					return f.compareTo(s);
				}
			}
		);

    	for (Edge<E> e : edges) {
    		pq.add(e);
    	}
    	
    	// There should be #vertices-1 edges in total when we are done.
    	int count = 0;
    	final int total = g.getVertices().size();
    	while (count < total-1) {
    		if (pq.isEmpty()) {
    			// We do not have a fully connected MST,
    			// but all of our components are at least fully connected.
    			break;
    		}

    		// Remove our next edge
    		Edge<E> e = pq.remove();
    		if (!areVerticesConnected(e.getVertexName1(), e.getVertexName2(), mst)) {
    			mst.addEdge(e.getVertexName1(), e.getVertexName2(), e.getEdgeData());
    			count++;
    		}
    	}

        return mst;
    }
    
    /**
     * Checks if the two vertices are already connected in the input graph g.
     * This is the case when the component of v0 is equal to the component v1 in 
     * regards to Kruscal's algoritgm.
     * @param v0 The name of the first vertex to check.
     * @param v1 The name of the second vertex to check.
     * @param g The subset of the mst we are building.
     * @return True if v0 and v1 are in the same component, False otherwise.
     */
    private static <V, E> boolean areVerticesConnected(String v0, String v1, IGraph<V, E> g) {
    	HashMap<String, Status> status = new HashMap<String, Status>();
    	for (Vertex<V> v : g.getVertices()) {
    		status.put(v.getVertexName(), Status.UNVISITED);
    	}
    	
    	// Perform a dfs starting at v0 looking for the vertex v1.
    	boolean out = dfs(v0, v1, status, g);
    	return out;
    }
    
    /**
     * Primary recursive method used by the areVerticesConnected(...) method.
     * @param current The current node we are looking at.
     * @param find The node we are looking for.
     * @param s Current status of searched nodes stored as a map.
     * @param g The graph we are searching through (will be used for neighbor information).
     * @return True if there is a path from 'current' to 'find', False otherwise.
     */
    private static <V, E> boolean dfs(String current, String find, HashMap<String, Status> s, IGraph<V, E> g) {
    	// Set the current node as discovered.
    	s.put(current, Status.VISITED);

    	// Base case - We found what we are looking for.
    	if (current.equals(find)) {
    		return true;
    	}
    	
    	// Recurse to undiscovered neighbors.
    	List<Vertex<V>> n = g.getNeighbors(current);
    	for (Vertex<V> v : n) {
    		// If we have not discovered this vertex yet, recurse to it.
    		if (s.get(v.getVertexName()) == Status.UNVISITED) {
    			if (dfs(v.getVertexName(), find, s, g)) {
    				return true;
    			}
    		}
    	}

    	return false;
    }
}
