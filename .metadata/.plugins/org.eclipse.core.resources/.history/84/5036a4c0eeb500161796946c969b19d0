package cs311.hw8;

import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import cs311.hw8.graph.Graph;
import cs311.hw8.graph.IGraph;

public class OSMMap {
	
	/**
	 * Graph which will represent the map data.
	 * This will be generated be the LoadMap(...) method of this class.
	 */
	private IGraph<Location, Street> g;
	
	public static void main(String[] args) {
		// Load the provided map of Ames and output the approximate total distance.
		OSMMap ames = new OSMMap();
		ames.LoadMap("AmesMap.txt");
		System.out.println(ames.TotalDistance());
	}
	
	public OSMMap() {
		// Initialize to an empty graph.
		g = new Graph<Location, Street>();
	}

    /* ----------------------------------------------------------------------------
     * Required Public Methods.
     * ---------------------------------------------------------------------------- */
	
	/**
	 * Loads all the data for the given file provided.
	 * If this map already has data loaded, that data will be overridden.
	 * @param filename The file we wish to load data from.
	 */
	public void LoadMap(String filename) {
		// Wipe all current graph data.
		g = new Graph<Location, Street>();

		try {
			File f = new File(filename);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(f);
			doc.normalize();

			// Read each node representing a vertex in our graph.
			NodeList nodes = doc.getElementsByTagName("node");
			for (int i=0; i<nodes.getLength(); i++) {
				Element e = (Element)nodes.item(i);
				String id = e.getAttribute("id");
				String lat = e.getAttribute("lat");
				String lon = e.getAttribute("lon");
				g.addVertex(id, new Location(lat, lon));
			}
			
			// Read each node representing an edge in our graph.
			NodeList edges = doc.getElementsByTagName("way");
			for (int i=0; i<edges.getLength(); i++) {
				Element e = (Element)edges.item(i);
				String id = e.getAttribute("id");
				
				// First we need to know whether or not this street is a oneway.
				boolean oneway = false;
				NodeList tags = e.getElementsByTagName("tag");
				for (int k=0; k<tags.getLength(); k++) {
					Element tag = (Element)tags.item(k);
					if (tag.getAttribute("k").equals("oneway") && tag.getAttribute("v").equals("yes")) {
						oneway = true;
					}
				}
			
				// Next find the list of vertices that define the edges making up this street.
				NodeList vertices = e.getElementsByTagName("nd");
				Element prev = null;
				for (int k=0; k<tags.getLength(); k++) {
					//
				}
			}

		} catch (Exception e) {
			// something happened
			System.out.println("uh oh something happened");
		}
	}
	
	/**
	 * Approximates the total distance for the current state of this map.
	 * This adds the length of all edges in the graph (representing this map)
	 * and dividing the total length by 2 to account for the fact that most roads
	 * travel in both directions.
	 * @return Approximate total distance of roads for the current state of the map.
	 */
	public double TotalDistance() {
		// TODO
		return 0.0;
	}

    /* ----------------------------------------------------------------------------
     * Private Utilities.
     * ---------------------------------------------------------------------------- */
	
	/**
	 * Represents a Location object as a pair of latitude and longitude double values.
	 * This will serve as vertex data for the graph.
	 * @author Ian Malerich
	 */
	private class Location {
		/**
		 * Latitude of this location as a double value.
		 */
		public double lat;
		
		/**
		 * Longitude of this location as a double value.
		 */
		public double lon;
		
		public Location(double Lat, double Lon) {
			lat = Lat;
			lon = Lon;
		}
		
		public Location(String Lat, String Lon) {
			this(new Double(Lat).doubleValue(), new Double(Lon).doubleValue());
		}
	}
	
	/**
	 * Represents a Streen on the map as a street name and the length of the street.
	 * This will serve as edge data for the graph.
	 * @author Ian Malerich
	 */
	private class Street {
		/**
		 * The name of this street.
		 */
		public String name;
		/**
		 * The length of this street.
		 */
		public double length;
		
		public Street(String Name, double Length) {
			name = Name;
			length = Length;
		}
		
		public Street(String Name, String Length) {
			this(Name, new Double(Length).doubleValue());
		}
	}
}
