package cs311.hw4;

import java.util.List;

public class MeasureTimeComplexity implements IMeasureTimeComplexity {

	@Override
	public int normalize(IMeasurable m, long timeInMilliseconds) {
		int count = 0;
		long timeInNanoseconds = timeInMilliseconds * 1000000;
		for (long start = System.nanoTime(); currentTime(start) < timeInNanoseconds; count++) {
			m.execute();
		}

		return count;
	}

	@Override
	public List<? extends IResult> measure(IMeasureFactory factory, int nmeasures, int startsize, int endsize, int stepsize) {
		return null;
	}
	
	/**
	 * Returns the current elapsed time for the given start point (system time).
	 * @param start The System.nanoTime() the simulation was started on.
	 * @return The current time elapsed.
	 */
	private long currentTime(long start) {
		return System.nanoTime() - start;
	}
}
